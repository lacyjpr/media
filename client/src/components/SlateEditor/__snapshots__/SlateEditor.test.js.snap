// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<SlateEditor /> renders correctly 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <RichTextExample />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <Styled(div)>
          <Styled(span)
                    active={false}
                    onMouseDown={[Function]}
          >
                    <Styled(Component)>
                              format_bold
                    </Styled(Component)>
          </Styled(span)>
          <Styled(span)
                    active={false}
                    onMouseDown={[Function]}
          >
                    <Styled(Component)>
                              format_italic
                    </Styled(Component)>
          </Styled(span)>
          <Styled(span)
                    active={false}
                    onMouseDown={[Function]}
          >
                    <Styled(Component)>
                              format_underlined
                    </Styled(Component)>
          </Styled(span)>
          <Styled(span)
                    active={false}
                    onMouseDown={[Function]}
          >
                    <Styled(Component)>
                              code
                    </Styled(Component)>
          </Styled(span)>
          <Styled(span)
                    active={false}
                    onMouseDown={[Function]}
          >
                    <Styled(Component)>
                              looks_one
                    </Styled(Component)>
          </Styled(span)>
          <Styled(span)
                    active={false}
                    onMouseDown={[Function]}
          >
                    <Styled(Component)>
                              looks_two
                    </Styled(Component)>
          </Styled(span)>
          <Styled(span)
                    active={false}
                    onMouseDown={[Function]}
          >
                    <Styled(Component)>
                              format_quote
                    </Styled(Component)>
          </Styled(span)>
          <Styled(span)
                    active={false}
                    onMouseDown={[Function]}
          >
                    <Styled(Component)>
                              format_list_numbered
                    </Styled(Component)>
          </Styled(span)>
          <Styled(span)
                    active={false}
                    onMouseDown={[Function]}
          >
                    <Styled(Component)>
                              format_list_bulleted
                    </Styled(Component)>
          </Styled(span)>
</Styled(div)>,
        <Editor
          autoCorrect={true}
          autoFocus={true}
          onChange={[Function]}
          onKeyDown={[Function]}
          placeholder="Enter some rich text..."
          plugins={Array []}
          readOnly={false}
          renderMark={[Function]}
          renderNode={[Function]}
          schema={Object {}}
          spellCheck={true}
          value={
                    Object {
                              "document": Object {
                                "data": Object {},
                                "nodes": Array [
                                  Object {
                                    "data": Object {},
                                    "isVoid": false,
                                    "nodes": Array [
                                      Object {
                                        "leaves": Array [
                                          Object {
                                            "marks": Array [],
                                            "object": "leaf",
                                            "text": "This is editable ",
                                          },
                                          Object {
                                            "marks": Array [
                                              Object {
                                                "data": Object {},
                                                "object": "mark",
                                                "type": "bold",
                                              },
                                            ],
                                            "object": "leaf",
                                            "text": "rich",
                                          },
                                          Object {
                                            "marks": Array [],
                                            "object": "leaf",
                                            "text": " text, ",
                                          },
                                          Object {
                                            "marks": Array [
                                              Object {
                                                "data": Object {},
                                                "object": "mark",
                                                "type": "italic",
                                              },
                                            ],
                                            "object": "leaf",
                                            "text": "much",
                                          },
                                          Object {
                                            "marks": Array [],
                                            "object": "leaf",
                                            "text": " better than a ",
                                          },
                                          Object {
                                            "marks": Array [
                                              Object {
                                                "data": Object {},
                                                "object": "mark",
                                                "type": "code",
                                              },
                                            ],
                                            "object": "leaf",
                                            "text": "<textarea>",
                                          },
                                          Object {
                                            "marks": Array [],
                                            "object": "leaf",
                                            "text": "!",
                                          },
                                        ],
                                        "object": "text",
                                      },
                                    ],
                                    "object": "block",
                                    "type": "paragraph",
                                  },
                                  Object {
                                    "data": Object {},
                                    "isVoid": false,
                                    "nodes": Array [
                                      Object {
                                        "leaves": Array [
                                          Object {
                                            "marks": Array [],
                                            "object": "leaf",
                                            "text": "Since it's rich text, you can do things like turn a selection of text ",
                                          },
                                          Object {
                                            "marks": Array [
                                              Object {
                                                "data": Object {},
                                                "object": "mark",
                                                "type": "bold",
                                              },
                                            ],
                                            "object": "leaf",
                                            "text": "bold",
                                          },
                                          Object {
                                            "marks": Array [],
                                            "object": "leaf",
                                            "text": ", or add a semantically rendered block quote in the middle of the page, like this:",
                                          },
                                        ],
                                        "object": "text",
                                      },
                                    ],
                                    "object": "block",
                                    "type": "paragraph",
                                  },
                                  Object {
                                    "data": Object {},
                                    "isVoid": false,
                                    "nodes": Array [
                                      Object {
                                        "leaves": Array [
                                          Object {
                                            "marks": Array [],
                                            "object": "leaf",
                                            "text": "A wise quote.",
                                          },
                                        ],
                                        "object": "text",
                                      },
                                    ],
                                    "object": "block",
                                    "type": "block-quote",
                                  },
                                  Object {
                                    "data": Object {},
                                    "isVoid": false,
                                    "nodes": Array [
                                      Object {
                                        "leaves": Array [
                                          Object {
                                            "marks": Array [],
                                            "object": "leaf",
                                            "text": "Try it out for yourself!",
                                          },
                                        ],
                                        "object": "text",
                                      },
                                    ],
                                    "object": "block",
                                    "type": "paragraph",
                                  },
                                ],
                                "object": "document",
                              },
                              "object": "value",
                            }
          }
/>,
      ],
      "className": "wrap-editor",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            <Styled(span)
              active={false}
              onMouseDown={[Function]}
>
              <Styled(Component)>
                            format_bold
              </Styled(Component)>
</Styled(span)>,
            <Styled(span)
              active={false}
              onMouseDown={[Function]}
>
              <Styled(Component)>
                            format_italic
              </Styled(Component)>
</Styled(span)>,
            <Styled(span)
              active={false}
              onMouseDown={[Function]}
>
              <Styled(Component)>
                            format_underlined
              </Styled(Component)>
</Styled(span)>,
            <Styled(span)
              active={false}
              onMouseDown={[Function]}
>
              <Styled(Component)>
                            code
              </Styled(Component)>
</Styled(span)>,
            <Styled(span)
              active={false}
              onMouseDown={[Function]}
>
              <Styled(Component)>
                            looks_one
              </Styled(Component)>
</Styled(span)>,
            <Styled(span)
              active={false}
              onMouseDown={[Function]}
>
              <Styled(Component)>
                            looks_two
              </Styled(Component)>
</Styled(span)>,
            <Styled(span)
              active={false}
              onMouseDown={[Function]}
>
              <Styled(Component)>
                            format_quote
              </Styled(Component)>
</Styled(span)>,
            <Styled(span)
              active={false}
              onMouseDown={[Function]}
>
              <Styled(Component)>
                            format_list_numbered
              </Styled(Component)>
</Styled(span)>,
            <Styled(span)
              active={false}
              onMouseDown={[Function]}
>
              <Styled(Component)>
                            format_list_bulleted
              </Styled(Component)>
</Styled(span)>,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "active": false,
              "children": <Styled(Component)>
                format_bold
</Styled(Component)>,
              "onMouseDown": [Function],
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": "format_bold",
              },
              "ref": null,
              "rendered": "format_bold",
              "type": [Function],
            },
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "active": false,
              "children": <Styled(Component)>
                format_italic
</Styled(Component)>,
              "onMouseDown": [Function],
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": "format_italic",
              },
              "ref": null,
              "rendered": "format_italic",
              "type": [Function],
            },
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "active": false,
              "children": <Styled(Component)>
                format_underlined
</Styled(Component)>,
              "onMouseDown": [Function],
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": "format_underlined",
              },
              "ref": null,
              "rendered": "format_underlined",
              "type": [Function],
            },
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "active": false,
              "children": <Styled(Component)>
                code
</Styled(Component)>,
              "onMouseDown": [Function],
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": "code",
              },
              "ref": null,
              "rendered": "code",
              "type": [Function],
            },
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "active": false,
              "children": <Styled(Component)>
                looks_one
</Styled(Component)>,
              "onMouseDown": [Function],
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": "looks_one",
              },
              "ref": null,
              "rendered": "looks_one",
              "type": [Function],
            },
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "active": false,
              "children": <Styled(Component)>
                looks_two
</Styled(Component)>,
              "onMouseDown": [Function],
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": "looks_two",
              },
              "ref": null,
              "rendered": "looks_two",
              "type": [Function],
            },
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "active": false,
              "children": <Styled(Component)>
                format_quote
</Styled(Component)>,
              "onMouseDown": [Function],
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": "format_quote",
              },
              "ref": null,
              "rendered": "format_quote",
              "type": [Function],
            },
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "active": false,
              "children": <Styled(Component)>
                format_list_numbered
</Styled(Component)>,
              "onMouseDown": [Function],
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": "format_list_numbered",
              },
              "ref": null,
              "rendered": "format_list_numbered",
              "type": [Function],
            },
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "active": false,
              "children": <Styled(Component)>
                format_list_bulleted
</Styled(Component)>,
              "onMouseDown": [Function],
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": "format_list_bulleted",
              },
              "ref": null,
              "rendered": "format_list_bulleted",
              "type": [Function],
            },
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "autoCorrect": true,
          "autoFocus": true,
          "onChange": [Function],
          "onKeyDown": [Function],
          "placeholder": "Enter some rich text...",
          "plugins": Array [],
          "readOnly": false,
          "renderMark": [Function],
          "renderNode": [Function],
          "schema": Object {},
          "spellCheck": true,
          "value": Object {
            "document": Object {
              "data": Object {},
              "nodes": Array [
                Object {
                  "data": Object {},
                  "isVoid": false,
                  "nodes": Array [
                    Object {
                      "leaves": Array [
                        Object {
                          "marks": Array [],
                          "object": "leaf",
                          "text": "This is editable ",
                        },
                        Object {
                          "marks": Array [
                            Object {
                              "data": Object {},
                              "object": "mark",
                              "type": "bold",
                            },
                          ],
                          "object": "leaf",
                          "text": "rich",
                        },
                        Object {
                          "marks": Array [],
                          "object": "leaf",
                          "text": " text, ",
                        },
                        Object {
                          "marks": Array [
                            Object {
                              "data": Object {},
                              "object": "mark",
                              "type": "italic",
                            },
                          ],
                          "object": "leaf",
                          "text": "much",
                        },
                        Object {
                          "marks": Array [],
                          "object": "leaf",
                          "text": " better than a ",
                        },
                        Object {
                          "marks": Array [
                            Object {
                              "data": Object {},
                              "object": "mark",
                              "type": "code",
                            },
                          ],
                          "object": "leaf",
                          "text": "<textarea>",
                        },
                        Object {
                          "marks": Array [],
                          "object": "leaf",
                          "text": "!",
                        },
                      ],
                      "object": "text",
                    },
                  ],
                  "object": "block",
                  "type": "paragraph",
                },
                Object {
                  "data": Object {},
                  "isVoid": false,
                  "nodes": Array [
                    Object {
                      "leaves": Array [
                        Object {
                          "marks": Array [],
                          "object": "leaf",
                          "text": "Since it's rich text, you can do things like turn a selection of text ",
                        },
                        Object {
                          "marks": Array [
                            Object {
                              "data": Object {},
                              "object": "mark",
                              "type": "bold",
                            },
                          ],
                          "object": "leaf",
                          "text": "bold",
                        },
                        Object {
                          "marks": Array [],
                          "object": "leaf",
                          "text": ", or add a semantically rendered block quote in the middle of the page, like this:",
                        },
                      ],
                      "object": "text",
                    },
                  ],
                  "object": "block",
                  "type": "paragraph",
                },
                Object {
                  "data": Object {},
                  "isVoid": false,
                  "nodes": Array [
                    Object {
                      "leaves": Array [
                        Object {
                          "marks": Array [],
                          "object": "leaf",
                          "text": "A wise quote.",
                        },
                      ],
                      "object": "text",
                    },
                  ],
                  "object": "block",
                  "type": "block-quote",
                },
                Object {
                  "data": Object {},
                  "isVoid": false,
                  "nodes": Array [
                    Object {
                      "leaves": Array [
                        Object {
                          "marks": Array [],
                          "object": "leaf",
                          "text": "Try it out for yourself!",
                        },
                      ],
                      "object": "text",
                    },
                  ],
                  "object": "block",
                  "type": "paragraph",
                },
              ],
              "object": "document",
            },
            "object": "value",
          },
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <Styled(div)>
            <Styled(span)
                        active={false}
                        onMouseDown={[Function]}
            >
                        <Styled(Component)>
                                    format_bold
                        </Styled(Component)>
            </Styled(span)>
            <Styled(span)
                        active={false}
                        onMouseDown={[Function]}
            >
                        <Styled(Component)>
                                    format_italic
                        </Styled(Component)>
            </Styled(span)>
            <Styled(span)
                        active={false}
                        onMouseDown={[Function]}
            >
                        <Styled(Component)>
                                    format_underlined
                        </Styled(Component)>
            </Styled(span)>
            <Styled(span)
                        active={false}
                        onMouseDown={[Function]}
            >
                        <Styled(Component)>
                                    code
                        </Styled(Component)>
            </Styled(span)>
            <Styled(span)
                        active={false}
                        onMouseDown={[Function]}
            >
                        <Styled(Component)>
                                    looks_one
                        </Styled(Component)>
            </Styled(span)>
            <Styled(span)
                        active={false}
                        onMouseDown={[Function]}
            >
                        <Styled(Component)>
                                    looks_two
                        </Styled(Component)>
            </Styled(span)>
            <Styled(span)
                        active={false}
                        onMouseDown={[Function]}
            >
                        <Styled(Component)>
                                    format_quote
                        </Styled(Component)>
            </Styled(span)>
            <Styled(span)
                        active={false}
                        onMouseDown={[Function]}
            >
                        <Styled(Component)>
                                    format_list_numbered
                        </Styled(Component)>
            </Styled(span)>
            <Styled(span)
                        active={false}
                        onMouseDown={[Function]}
            >
                        <Styled(Component)>
                                    format_list_bulleted
                        </Styled(Component)>
            </Styled(span)>
</Styled(div)>,
          <Editor
            autoCorrect={true}
            autoFocus={true}
            onChange={[Function]}
            onKeyDown={[Function]}
            placeholder="Enter some rich text..."
            plugins={Array []}
            readOnly={false}
            renderMark={[Function]}
            renderNode={[Function]}
            schema={Object {}}
            spellCheck={true}
            value={
                        Object {
                                    "document": Object {
                                      "data": Object {},
                                      "nodes": Array [
                                        Object {
                                          "data": Object {},
                                          "isVoid": false,
                                          "nodes": Array [
                                            Object {
                                              "leaves": Array [
                                                Object {
                                                  "marks": Array [],
                                                  "object": "leaf",
                                                  "text": "This is editable ",
                                                },
                                                Object {
                                                  "marks": Array [
                                                    Object {
                                                      "data": Object {},
                                                      "object": "mark",
                                                      "type": "bold",
                                                    },
                                                  ],
                                                  "object": "leaf",
                                                  "text": "rich",
                                                },
                                                Object {
                                                  "marks": Array [],
                                                  "object": "leaf",
                                                  "text": " text, ",
                                                },
                                                Object {
                                                  "marks": Array [
                                                    Object {
                                                      "data": Object {},
                                                      "object": "mark",
                                                      "type": "italic",
                                                    },
                                                  ],
                                                  "object": "leaf",
                                                  "text": "much",
                                                },
                                                Object {
                                                  "marks": Array [],
                                                  "object": "leaf",
                                                  "text": " better than a ",
                                                },
                                                Object {
                                                  "marks": Array [
                                                    Object {
                                                      "data": Object {},
                                                      "object": "mark",
                                                      "type": "code",
                                                    },
                                                  ],
                                                  "object": "leaf",
                                                  "text": "<textarea>",
                                                },
                                                Object {
                                                  "marks": Array [],
                                                  "object": "leaf",
                                                  "text": "!",
                                                },
                                              ],
                                              "object": "text",
                                            },
                                          ],
                                          "object": "block",
                                          "type": "paragraph",
                                        },
                                        Object {
                                          "data": Object {},
                                          "isVoid": false,
                                          "nodes": Array [
                                            Object {
                                              "leaves": Array [
                                                Object {
                                                  "marks": Array [],
                                                  "object": "leaf",
                                                  "text": "Since it's rich text, you can do things like turn a selection of text ",
                                                },
                                                Object {
                                                  "marks": Array [
                                                    Object {
                                                      "data": Object {},
                                                      "object": "mark",
                                                      "type": "bold",
                                                    },
                                                  ],
                                                  "object": "leaf",
                                                  "text": "bold",
                                                },
                                                Object {
                                                  "marks": Array [],
                                                  "object": "leaf",
                                                  "text": ", or add a semantically rendered block quote in the middle of the page, like this:",
                                                },
                                              ],
                                              "object": "text",
                                            },
                                          ],
                                          "object": "block",
                                          "type": "paragraph",
                                        },
                                        Object {
                                          "data": Object {},
                                          "isVoid": false,
                                          "nodes": Array [
                                            Object {
                                              "leaves": Array [
                                                Object {
                                                  "marks": Array [],
                                                  "object": "leaf",
                                                  "text": "A wise quote.",
                                                },
                                              ],
                                              "object": "text",
                                            },
                                          ],
                                          "object": "block",
                                          "type": "block-quote",
                                        },
                                        Object {
                                          "data": Object {},
                                          "isVoid": false,
                                          "nodes": Array [
                                            Object {
                                              "leaves": Array [
                                                Object {
                                                  "marks": Array [],
                                                  "object": "leaf",
                                                  "text": "Try it out for yourself!",
                                                },
                                              ],
                                              "object": "text",
                                            },
                                          ],
                                          "object": "block",
                                          "type": "paragraph",
                                        },
                                      ],
                                      "object": "document",
                                    },
                                    "object": "value",
                                  }
            }
/>,
        ],
        "className": "wrap-editor",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              <Styled(span)
                active={false}
                onMouseDown={[Function]}
>
                <Styled(Component)>
                                format_bold
                </Styled(Component)>
</Styled(span)>,
              <Styled(span)
                active={false}
                onMouseDown={[Function]}
>
                <Styled(Component)>
                                format_italic
                </Styled(Component)>
</Styled(span)>,
              <Styled(span)
                active={false}
                onMouseDown={[Function]}
>
                <Styled(Component)>
                                format_underlined
                </Styled(Component)>
</Styled(span)>,
              <Styled(span)
                active={false}
                onMouseDown={[Function]}
>
                <Styled(Component)>
                                code
                </Styled(Component)>
</Styled(span)>,
              <Styled(span)
                active={false}
                onMouseDown={[Function]}
>
                <Styled(Component)>
                                looks_one
                </Styled(Component)>
</Styled(span)>,
              <Styled(span)
                active={false}
                onMouseDown={[Function]}
>
                <Styled(Component)>
                                looks_two
                </Styled(Component)>
</Styled(span)>,
              <Styled(span)
                active={false}
                onMouseDown={[Function]}
>
                <Styled(Component)>
                                format_quote
                </Styled(Component)>
</Styled(span)>,
              <Styled(span)
                active={false}
                onMouseDown={[Function]}
>
                <Styled(Component)>
                                format_list_numbered
                </Styled(Component)>
</Styled(span)>,
              <Styled(span)
                active={false}
                onMouseDown={[Function]}
>
                <Styled(Component)>
                                format_list_bulleted
                </Styled(Component)>
</Styled(span)>,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "active": false,
                "children": <Styled(Component)>
                  format_bold
</Styled(Component)>,
                "onMouseDown": [Function],
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": "format_bold",
                },
                "ref": null,
                "rendered": "format_bold",
                "type": [Function],
              },
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "active": false,
                "children": <Styled(Component)>
                  format_italic
</Styled(Component)>,
                "onMouseDown": [Function],
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": "format_italic",
                },
                "ref": null,
                "rendered": "format_italic",
                "type": [Function],
              },
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "active": false,
                "children": <Styled(Component)>
                  format_underlined
</Styled(Component)>,
                "onMouseDown": [Function],
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": "format_underlined",
                },
                "ref": null,
                "rendered": "format_underlined",
                "type": [Function],
              },
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "active": false,
                "children": <Styled(Component)>
                  code
</Styled(Component)>,
                "onMouseDown": [Function],
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": "code",
                },
                "ref": null,
                "rendered": "code",
                "type": [Function],
              },
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "active": false,
                "children": <Styled(Component)>
                  looks_one
</Styled(Component)>,
                "onMouseDown": [Function],
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": "looks_one",
                },
                "ref": null,
                "rendered": "looks_one",
                "type": [Function],
              },
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "active": false,
                "children": <Styled(Component)>
                  looks_two
</Styled(Component)>,
                "onMouseDown": [Function],
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": "looks_two",
                },
                "ref": null,
                "rendered": "looks_two",
                "type": [Function],
              },
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "active": false,
                "children": <Styled(Component)>
                  format_quote
</Styled(Component)>,
                "onMouseDown": [Function],
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": "format_quote",
                },
                "ref": null,
                "rendered": "format_quote",
                "type": [Function],
              },
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "active": false,
                "children": <Styled(Component)>
                  format_list_numbered
</Styled(Component)>,
                "onMouseDown": [Function],
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": "format_list_numbered",
                },
                "ref": null,
                "rendered": "format_list_numbered",
                "type": [Function],
              },
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "active": false,
                "children": <Styled(Component)>
                  format_list_bulleted
</Styled(Component)>,
                "onMouseDown": [Function],
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": "format_list_bulleted",
                },
                "ref": null,
                "rendered": "format_list_bulleted",
                "type": [Function],
              },
              "type": [Function],
            },
          ],
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "autoCorrect": true,
            "autoFocus": true,
            "onChange": [Function],
            "onKeyDown": [Function],
            "placeholder": "Enter some rich text...",
            "plugins": Array [],
            "readOnly": false,
            "renderMark": [Function],
            "renderNode": [Function],
            "schema": Object {},
            "spellCheck": true,
            "value": Object {
              "document": Object {
                "data": Object {},
                "nodes": Array [
                  Object {
                    "data": Object {},
                    "isVoid": false,
                    "nodes": Array [
                      Object {
                        "leaves": Array [
                          Object {
                            "marks": Array [],
                            "object": "leaf",
                            "text": "This is editable ",
                          },
                          Object {
                            "marks": Array [
                              Object {
                                "data": Object {},
                                "object": "mark",
                                "type": "bold",
                              },
                            ],
                            "object": "leaf",
                            "text": "rich",
                          },
                          Object {
                            "marks": Array [],
                            "object": "leaf",
                            "text": " text, ",
                          },
                          Object {
                            "marks": Array [
                              Object {
                                "data": Object {},
                                "object": "mark",
                                "type": "italic",
                              },
                            ],
                            "object": "leaf",
                            "text": "much",
                          },
                          Object {
                            "marks": Array [],
                            "object": "leaf",
                            "text": " better than a ",
                          },
                          Object {
                            "marks": Array [
                              Object {
                                "data": Object {},
                                "object": "mark",
                                "type": "code",
                              },
                            ],
                            "object": "leaf",
                            "text": "<textarea>",
                          },
                          Object {
                            "marks": Array [],
                            "object": "leaf",
                            "text": "!",
                          },
                        ],
                        "object": "text",
                      },
                    ],
                    "object": "block",
                    "type": "paragraph",
                  },
                  Object {
                    "data": Object {},
                    "isVoid": false,
                    "nodes": Array [
                      Object {
                        "leaves": Array [
                          Object {
                            "marks": Array [],
                            "object": "leaf",
                            "text": "Since it's rich text, you can do things like turn a selection of text ",
                          },
                          Object {
                            "marks": Array [
                              Object {
                                "data": Object {},
                                "object": "mark",
                                "type": "bold",
                              },
                            ],
                            "object": "leaf",
                            "text": "bold",
                          },
                          Object {
                            "marks": Array [],
                            "object": "leaf",
                            "text": ", or add a semantically rendered block quote in the middle of the page, like this:",
                          },
                        ],
                        "object": "text",
                      },
                    ],
                    "object": "block",
                    "type": "paragraph",
                  },
                  Object {
                    "data": Object {},
                    "isVoid": false,
                    "nodes": Array [
                      Object {
                        "leaves": Array [
                          Object {
                            "marks": Array [],
                            "object": "leaf",
                            "text": "A wise quote.",
                          },
                        ],
                        "object": "text",
                      },
                    ],
                    "object": "block",
                    "type": "block-quote",
                  },
                  Object {
                    "data": Object {},
                    "isVoid": false,
                    "nodes": Array [
                      Object {
                        "leaves": Array [
                          Object {
                            "marks": Array [],
                            "object": "leaf",
                            "text": "Try it out for yourself!",
                          },
                        ],
                        "object": "text",
                      },
                    ],
                    "object": "block",
                    "type": "paragraph",
                  },
                ],
                "object": "document",
              },
              "object": "value",
            },
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;
